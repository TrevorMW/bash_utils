#! /usr/bin/env bash


type greadlink >/dev/null 2>&1 && CWD="$( dirname "$( greadlink -f "$0" )" )" || \
  CWD="$( dirname "$( readlink -f "$0" )" )"

themePath=$(pwd)

. $themePath/bash_utils/tools/functions

type git >/dev/null 2>&1 || errorMsg "Please install git before continuing..."


basePath=$( git rev-parse --show-toplevel )
utilsPath="$themePath/bash_utils"

gatherInfo (){

  declare -a envs=('local' 'staging' 'production')
  local newConfig="$utilsPath/config.yml"

  if [ ! -f $newConfig ]; then

    cp "$utilsPath/config.yml.sample" $newConfig

    for env in ${envs[@]}; do

      if prompt_confirm "Does this site have $env configuration? "; then

        echo

        echoColorText "Gathering config for the $CYAN\"$env\"$YELLOW environment..." "" $YELLOW;

        separator

        read -p $CYAN" - $env Base Path? "$NOCOLOR          BasePath
        read -p $CYAN" - $env Database Name? "$NOCOLOR      DbName
        read -p $CYAN" - $env Database User? "$NOCOLOR      DbUser
        read -p $CYAN" - $env Database Password? "$NOCOLOR  DbPass

        read -p $CYAN" - $env SSH user? "$NOCOLOR           SshUser
        read -p $CYAN" - $env SSH password? "$NOCOLOR       SshPass
        read -p $CYAN" - $env SSH IP address? "$NOCOLOR     SshIp

        echo
        separator
        echoColorText "Populating config.yml with $PURPLE${env}$YELLOW data" "" $YELLOW
        echo

        bp="@${env}BasePath";
        dbN="@${env}DbName";
        dbU="@${env}DbUser";
        dbP="@${env}DbPass";
        sshU="@${env}SshUser";
        sshP="@${env}SshPass";
        sshI="@${env}SshIp";

        local replaceString="s|${bp}|${BasePath}|g;";
              replaceString+="s|${dbN}|${DbName}|g;";
              replaceString+="s|${dbU}|${DbUser}|g;";
              replaceString+="s|${dbP}|${DbPass}|g;";
              replaceString+="s|${sshU}|${SshUser}|g;";
              replaceString+="s|${sshP}|${SshPass}|g;";
              replaceString+="s|${sshI}|${SshIp}|g;";

        sed_inplace $newConfig $replaceString

      fi;

    done;

  else

    echoColorText "Configuration detected; Skipping configuration prompts." " - " $YELLOW
    echo
    echo

  fi;
}

updateModules (){

  taskMsg "Updating Node Modules"
  separator

  if [ -d "$themePath/node_modules" ]; then
    echoColorText 'Updating Node Modules' ' - ' $YELLOW
    echo
    npm update
  else
    echoColorText 'Installing Node Modules' ' - ' $YELLOW
    echo
    npm install
  fi
}


initSetup(){

  echo
  taskMsg "Starting Setup"
  separator "="
  echo

  gatherInfo

  updateModules
}

# Start script
initSetup
